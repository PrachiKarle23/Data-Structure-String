Approach 1
string reverse(string s){
	int i=0,n=s.length()-1;
	while(i<=n){
		swap(s[i],s[n]);
		i++;
		n--;
	}
	return s;
}
bool isPalindrome(string &s)
{
	string p=reverse(s);
    for(int i=0;i<s.length();i++){
        if(s[i]!=p[i]){
         return false;
         }
    }
    return true;
}

Approach 2
bool solve(string &s,int i,int j){
	if(i>j){
		return true;
	}
	if(s[i]!=s[j]){
		return false;
	}
	else{
		return solve(s,i+1,j-1);
	}
}
bool isPalindrome(string &s)
{
	int n=s.length();
	return solve(s,0,n-1);
}

Approach 3
bool solve(string &s,int i){
	int n=s.length();
	int j=n-i-1;
	if(i>j){
		return true;
	}
	if(s[i]!=s[j]){
		return false;
	}
	else{
		return solve(s,i+1);
	}
}
bool isPalindrome(string &s)
{
	return solve(s,0);
}
